{
  
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "VMName": {
      "type": "string",
      "metadata": {
        "description": "Infrastructure Virtual Machine name."
      }
    },

    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    //"dnsLabelPrefix": {
    //  "type": "string",
    //  "metadata": {
    //    "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
    //  }
    //},
    "DomUserName": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "DomPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "OUPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "OU to place VMs when joining to domain."
      }
    },

    "windowsOSVersion": {
      "type": "string",
      "defaultValue": "2016-Datacenter",
      "allowedValues": [
        "2008-R2-SP1",
        "2012-Datacenter",
        "2012-R2-Datacenter",
        "2016-Datacenter",
        "2019-Datacenter",
        "Windows-Server-Technical-Preview"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."
      }
    },
    "VMSize": {
      "type": "string",
      "defaultValue": "Standard_A2_v2",
      "allowedValues": [
        "Basic_A2",
        "Basic_A3",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_A1",
        "Standard_A1_v2",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2M_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A5",
        "Standard_D11_v2",
        "Standard_DS2_v2",
        "Standard_B2s",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_B8ms",
        "Standard_B4ms",
        "Standard_B2ms",
        "Standard_A2m_v2",
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D64s_v3"
      ],
      "metadata": {
        "description": "The size of the VM."
      }
    },
    //"VMSize2": {
    //  "type": "string",
    //  "defaultValue": "Standard_D1",
    //  "allowedValues": [
    //    "Standard_D1",
    //    "Standard_D2",
    //    "Standard_D3",
    //    "Standard_D4",
    //    "Standard_D11",
    //    "Standard_D12",
    //    "Standard_D13",
    //    "Standard_A1",
    //    "Standard_A2",
    //    "Standard_A3",
    //    "Standard_A4",
    //    "Standard_A5"
    //  ],
    //  "metadata": {
    //    "description": "The size of the VM."
    //  }
    //},
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "Change this value to your repo name if deploying from a fork"
      },
      "defaultValue": "https://raw.githubusercontent.com/EISSystemsDevOps/Automation/master/Resources"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "group": "Infrastructure settings",
        "description": "Auto-generated token to access _artifactsLocation",
        "artifactsLocationSasToken": ""
      },
      "defaultValue": ""
    },
    "storageAcctNewOrExisting": {
      "type": "string",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Use a new or existing storage account"
      },
      "defaultValue": "new"
    },
    "storageAcctResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Resource Group for storage account for VHD placement. Only needed if using existing storage account"
      },
      "defaultValue": ""
    },

    "storageAcctName": {
      "type": "string",
      "metadata": {
        "description": "Name of storage Account for VHD placement."
      },
      "defaultValue": "[tolower(concat(parameters('VMName'),'sa'))]"
    },
    "storageAcctContainerName": {
      "type": "string",
      "metadata": {
        "description": "Name of storage Account container for VHD placement."
      },
      "defaultValue": "vhds"
    },
    "domainName": {
      "type": "string",
      "metadata": {
        "description": "Join to local domain."
      }
    },
    "SubscriptionID": {
      "type": "string",
      "metadata": {
        "description": "SubscriptionID where VNet resides"
      }
    },
    "VNetRG": {
      "type": "string",
      "metadata": {
        "description": "VNet Resource Group."
      }
    },
    "VNetName": {
      "type": "string",
      "metadata": {
        "description": "VNet Name."
      }
    },
    "SubnetName": {
      "type": "string",
      "metadata": {
        "description": "SubnetName."
      }
    },
    "ExclusionsPaths": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Semicolon delimited list of file paths or locations to exclude from scanning"
            }
        },
        "ExclusionsExtensions": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Semicolon delimited list of file extensions to exclude from scanning"
            }
        },
        "ExclusionsProcesses": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Semicolon delimited list of process names to exclude from scanning"
            }
        },
        "RealtimeProtectionEnabled": {
            "type": "string",
            "defaultValue": "true",
            "metadata": {
                "description": "Indicates whether or not real time protection is enabled (default is true)"
            }
        },
        "ScheduledScanSettingsIsEnabled": {
            "type": "string",
            "defaultValue": "false",
            "metadata": {
                "description": "Indicates whether or not custom scheduled scan settings are enabled (default is false)"
            }
        },
        "ScheduledScanSettingsScanType": {
            "type": "string",
            "defaultValue": "Quick",
            "metadata": {
                "description": "Indicates whether scheduled scan setting type is set to Quick or Full (default is Quick)"
            }
        },
        "ScheduledScanSettingsDay": {
            "type": "string",
            "defaultValue": "7",
            "metadata": {
                "description": "Day of the week for scheduled scan (1-Sunday, 2-Monday, ..., 7-Saturday)"
            }
        },
    "ScheduledScanSettingsTime": {
      "type": "string",
      "defaultValue": "120",
      "metadata": {
        "description": "When to perform the scheduled scan, measured in minutes from midnight (0-1440). For example: 0 = 12AM, 60 = 1AM, 120 = 2AM."
      }
    },
    "workspaceId": {
      "type": "string",
      "metadata": {
        "description": "workspaceId."
      }
    },
    "workspaceKey": {
      "type": "string",
      "metadata": {
        "description": "workspaceKey."
      }
    }
  



  },//End of Parameters

  "variables": {
    //"dnsLabelPrefix1": "[tolower(concat(parameters('CustomerName'),variables('VMName1'),'-pip'))]",
    //"dnsLabelPrefix2": "[tolower(concat(parameters('CustomerName'),variables('VMName2'),'-pip'))]",
    //"storageAccountName": "[parameters('storageAcctName')]",
    //"virt adualNetworkName": "[concat(parameters('CustomerName'),'VNET01')]",
    //"subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('VNetObject').subnet2Name)]",
    // "domainUserA": "[concat(parameters('domainName'),'\\')]",
   //parameters('adminUsername'))",
    "DomUserNameSlashes": "[concat('\\',parameters('DomUserName'))]",
    //Environment VM Names
    //Environment VM Sizes
    //"VMSize1": "Standard_A2",
    "subnetRef": "[concat('/subscriptions/',parameters('SubscriptionID'),'/resourceGroups/',parameters('VNetRG'),'/providers/Microsoft.Network/virtualNetworks/',parameters('VnetName'),'/subnets/',parameters('SubnetName'))]",
    //DSC URLs
    //"DSCmodulesUrl": "[concat(parameters('_artifactsLocation'),'/DSC/')]",
    //"DCDSCModuleUrl": "[concat(variables('DSCmodulesUrl'), 'CreateADPDC.zip')]",
    "Configurationurl":"https://raw.githubusercontent.com/djnavarrete/paragondev/master/Resources/configurationdata.psd1",
    
      //Template URIs
    "TemplateUrl": "[concat(parameters('_artifactsLocation'),'/Templates')]",
    ////  This is a network interface with static IP address
    "NetworkInterfaceStaticURI": "[concat(variables('TemplateUrl'),'/','network_interface_static.json')]",
    ////This is a standard NIC with a Public IP attached:
    "NetworkInterfacePIPURI": "[concat(variables('TemplateUrl'),'/','network_interface_pip.json')]",
    ////This is a standard NIC without a Public IP or Load balancer:
    "NetworkInterfaceURI": "[concat(variables('TemplateUrl'),'/','network_interface.json')]",
    "NetworkInterfaceDNSURI": "[concat(variables('TemplateUrl'),'/','network_interface_dns.json')]",
    ////  Comment out the LoadBalancerResource section as well if you want to forego Load balancer
    ////  Comment out the Public IP section as well if you want to forego Public IP
    "VMUri": "[concat(variables('TemplateUrl'),'/','vm.json')]",
    "StorageAccountURI": "[concat(variables('TemplateUrl'),'/',parameters('storageAcctNewOrExisting'),'_storage_account.json')]",
    "NetworkSecurityGroupURI": "[concat(variables('TemplateUrl'),'/','rdp_network_security_group.json')]",
    "LoadBalancerURI": "[concat(variables('TemplateUrl'),'/','load_balancer.json')]",

    "StorageAccountObject": {
      "Name": "[parameters('storageAcctName')]",
      "SkuName": "Standard_LRS",
      "ResourceGroup": "[parameters('storageAcctResourceGroup')]"
    },
    "NICObject5": {
      "Name": "[concat(parameters('VMName'),'-Nic')]",
      "subnetRef": "[variables('subnetRef')]"  
     // "IPAddress": "[parameters('DCIPAddress')]"
      //   "LoadBalancerName": "[concat(variables('VMName2'),'-LB')]",
      // "LoadBalancerBackEndName": "[variables('LBObject2').BackEndName]"
    },
    //"NSGObject1": {
    //  "Name": "FrontEnd-NSG",
    //  "Rule1SourcePort": "*",
    //  "Rule1DestinationPort": "145",
    //  "Rule1Access": "Allow",
    //  "LoadBalancerBackEndName": "[variables('LBObject1').BackEndName]"
    //},
    //"NSGObject2": {
    //  "Name": "FrontEnd-NSG-2",
    //  "Rule1SourcePort": "*",
    //  "Rule1DestinationPort": "145",
    //  "Rule1Access": "Allow",
    //  "LoadBalancerBackEndName": "[variables('LBObject2').BackEndName]"
 // },
    "VMObject": {
      "Name": "[parameters('VMName')]",
      "Size": "[parameters('VMSize')]",
      //     "ASName": "[variables('ASObject2').Name]",
      "nicName": "[variables('NICObject5').Name]",
      "adminUserName": "[parameters('adminUsername')]",
      "adminPassword": "[parameters('adminPassword')]",
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "[parameters('windowsOSVersion')]",
      "version":"latest",
      "storageAccountName": "[parameters('storageAcctName')]",
      "storageAccountContainerName": "[parameters('storageAcctContainerName')]",
      "URI": "[variables('VMUri')]",
      "DataDiskSizeGB": "80"
 
    }

  },
  "resources": [
    // {
    //  "name": "AvailabilitySetResource1",
    //  "type": "Microsoft.Resources/deployments",
    //  "apiVersion": "2016-02-01",
    //  "dependsOn": [],
    //  "properties": {
    //      "mode": "Incremental",
    //    "templateLink": {
    //     //"uri": "[concat(parameters('_artifactsLocation'),'/','availability_set.json', parameters('_artifactsLocationSasToken'))]",
    //      "uri": "[variables('AvailabilitySetURI')]",
    //      "contentVersion": "1.0.0.0"
    //    },
    //    "parameters": {
    //      "ASObject": {
    //        //"value": "[concat(variables('VMName1'),'-','availabilityset')]"
    //        "value": "[variables('ASObject1')]"
    //      }
    //    }
    //  }
    //},
    // {
    //  "name": "AvailabilitySetResource2",
    //  "type": "Microsoft.Resources/deployments",
    //  "apiVersion": "2016-02-01",
    //  "dependsOn": [],
    //  "properties": {
    //      "mode": "Incremental",
    //    "templateLink": {
    //     //"uri": "[concat(parameters('_artifactsLocation'),'/','availability_set.json', parameters('_artifactsLocationSasToken'))]",
    //      "uri": "[variables('AvailabilitySetURI')]",
    //      "contentVersion": "1.0.0.0"
    //    },
    //    "parameters": {
    //      "ASObject": {
    //        //"value": "[concat(variables('VMName1'),'-','availabilityset')]"
    //        "value": "[variables('ASObject2')]"
    //      }
    //    }
    //  }
    //},
    {
      "name": "StorageAccountResource",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [ ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('StorageAccountURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "StorageAccountObject": {
            //"value": "[concat(variables('VMName1'),'-','availabilityset')]"
            "value": "[variables('StorageAccountObject')]"
          }
        }
      }
    },


    {
      "name": "NetworkInterfaceResource",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-02-01",
      "dependsOn": [
        //       "[resourceid('Microsoft.Resources/deployments/', 'PublicIPResource2')]",
       // "[resourceid('Microsoft.Resources/deployments/', 'VirtualNetworkResource')]" //,
        //       "[resourceid('Microsoft.Resources/deployments/', 'LoadBalancerResource2')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('NetworkInterfaceURI')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {

          "NICObject": {
            "value": "[variables('NICObject5')]"
          }
        }
      }
    },

    {
      "name": "VMResource",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[resourceid('Microsoft.Resources/deployments/', 'StorageAccountResource')]",
        "[resourceid('Microsoft.Resources/deployments/', 'NetworkInterfaceResource')]"
        //        "[resourceid('Microsoft.Resources/deployments/', 'AvailabilitySetResource1')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          //   "uri": "[concat(parameters('_artifactsLocation'),'/','VM.json', parameters('_artifactsLocationSasToken'))]",
          "uri": "[variables('VMObject').Uri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "VMObject": {
            "value": "[variables('VMObject')]"
          }
        }
      }
    },

    {
      "comments": "Join domain - JsonADDomainExtension",
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('VMName'),'/joindomain')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceid('Microsoft.Resources/deployments/', 'VMResource')]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[parameters('domainName')]",
          "User": "[concat(parameters('domainName'), variables('DomUserNameSlashes'))]",
          "Restart": "true",
          //                    "Options": "[variables('domainJoinOptions')]",
          "Options": "3",
          "OUPath": "[parameters('OUPath')]"
        },
        "protectedSettings": {
          "Password": "[parameters('DomPassword')]"
        }
      }
    },
    //Antimalware extension
    {
      "name": "[concat(parameters('VMName'),'/IaaSAntimalware')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceid('Microsoft.Resources/deployments/', 'VMResource')]"
      ],
      "apiVersion": "2015-06-15",
      "properties": {
        "publisher": "Microsoft.Azure.Security",
        "type": "IaaSAntimalware",
        "typeHandlerVersion": "1.5",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "AntimalwareEnabled": true,
          "RealtimeProtectionEnabled": "[parameters('RealtimeProtectionEnabled')]",
          "ScheduledScanSettings": {
            "isEnabled": "[parameters('ScheduledScanSettingsIsEnabled')]",
            "day": "[parameters('ScheduledScanSettingsDay')]",
            "time": "[parameters('ScheduledScanSettingsTime')]",
            "scanType": "[parameters('ScheduledScanSettingsScanType')]"
          },
          "Exclusions": {
            "Extensions": "[parameters('ExclusionsExtensions')]",
            "Paths": "[parameters('ExclusionsPaths')]",
            "Processes": "[parameters('ExclusionsProcesses')]"
          }
        }
      }
    }



  ] //,
  //"outputs": {
  //"hostname": {
  // "type": "string",
  //"value": "[reference(variables('PIPObject').Name).dnsSettings.fqdn]"
  // }
  // }
}
